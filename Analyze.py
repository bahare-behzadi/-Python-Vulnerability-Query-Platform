#import requests
"""import re
def get_nvd_data():
    r = requests.get('https://nvd.nist.gov/vuln/data-feeds')
    for filename in re.findall("nvdcve-1.1-[0-9]*\.json\.zip",r.text):
        print(filename)
        r_file = requests.get('https://nvd.nist.gov/feeds/json/cve/1.1/'
                                                + filename, stream=True)
        with open('zip/' + filename, 'wb') as f:
            for chunk in r_file:
                f.write(chunk)
# 1. Get NVD zip files and store them locally
get_nvd_data()"""
 #Utility function used in the following one
from os.path import join
import json
import matplotlib.pyplot as plt

def create_nvd_dict(year):
    filename = join("json/nvdcve-1.1-" + str(year) + ".json")
    print("Opening: " + filename)
    with open(filename, encoding="utf8") as json_file:
        cve_dict = json.load(json_file)
    return(cve_dict)

def contains_word(s, w):
    return (" " + w.lower() + " ") in (" " + s.lower() + " ")
from os import listdir
def search_description(expression):
    # Get number of json files
    list = listdir("json/")
    number_files = len(list) - 1
    list_of_reports = []
    #Considering CVE reports start from 2002. There are as many files as reporting years
    for year in range(2002,2002 + number_files):
        cve_dict = create_nvd_dict(year)
        CVE_Items = cve_dict["CVE_Items"]
        for item in CVE_Items:
            description_list = item["cve"]["description"]["description_data"]
            if description_list:
                description = description_list[0]["value"]
                if contains_word(description, expression):
                    if "baseMetricV3" in item["impact"]:
                        #list_of_reports.append(item["cve"]["CVE_data_meta"]["ID"])
                        list_of_reports.append(item["impact"]["baseMetricV3"]["cvssV3"]["baseScore"])
                    else:
                        pass
    return (list_of_reports)
averages=[]
compnents=["RTU","PLC","HMI","MTU"]

list_of_RTU_IDs = search_description("RTU")
averages.append(sum(list_of_RTU_IDs) / len(list_of_RTU_IDs))

list_of_PLC_IDs = search_description("PLC")
averages.append(sum(list_of_PLC_IDs) / len(list_of_PLC_IDs))

list_of_HMI_IDs = search_description("HMI")
averages.append(sum(list_of_HMI_IDs) / len(list_of_HMI_IDs))

list_of_MTU_IDs = search_description("MTU")
averages.append(sum(list_of_MTU_IDs) / len(list_of_MTU_IDs))

print(list_of_RTU_IDs)
print(list_of_PLC_IDs)
print(list_of_HMI_IDs)
print(list_of_MTU_IDs)

print ("Number of RTU related repots:" + str (len(list_of_RTU_IDs)))
print ("Number of PLC related repots:" + str (len(list_of_PLC_IDs)))
print ("Number of HMI related repots:" + str (len(list_of_HMI_IDs)))
print ("Number of MTU related repots:" + str (len(list_of_MTU_IDs)))

print(averages)
plt.bar(compnents, averages)
plt.xlabel('Components')
plt.ylabel('Average Scores')
plt.title('Average Scores for Components')
plt.show()

plt.plot(compnents, averages, marker='o')
plt.xlabel('Components')
plt.ylabel('Average Scores')
plt.title('Average Scores for Components')
plt.show()

def search_description(expression):
    # Get number of json files
    list = listdir("json/")
    number_files = len(list) - 1
    list_of_reports = []
    #Considering CVE reports start from 2002. There are as many files as reporting years
    for year in range(2002,2002 + number_files):
        cve_dict = create_nvd_dict(year)
        CVE_Items = cve_dict["CVE_Items"]
        for item in CVE_Items:
            description_list = item["cve"]["description"]["description_data"]
            if description_list:
                description = description_list[0]["value"]
                if contains_word(description, expression):
                    list_of_reports.append(item["cve"]["CVE_data_meta"]["ID"])
    return (list_of_reports)
threats=[]
fields=["overflow","denial of service","sql injection","Cross-Site","memory corruption","zero day"]
list_of_overflow_IDs = search_description("overflow")
threats.append(len(list_of_overflow_IDs))

list_of_denial_of_service_IDs = search_description("denial of service")
threats.append(len(list_of_denial_of_service_IDs))

list_of_sql_injection_IDs = search_description("sql injection")
threats.append(len(list_of_sql_injection_IDs))

list_of_Cross_Site_IDs = search_description("Cross-Site")
threats.append(len(list_of_Cross_Site_IDs))

list_of_memory_corruption_IDs = search_description("memory corruption")
threats.append(len(list_of_memory_corruption_IDs))

zero_day = search_description("zero day")
threats.append(len(zero_day))

print ("Number of overflow related repots:" + str (len(list_of_overflow_IDs)))
print ("Number of denial of service related repots:" + str (len(list_of_denial_of_service_IDs)))
print ("Number of sql injection related repots:" + str (len(list_of_sql_injection_IDs)))
print ("Number of  Cross-Site related repots:" + str (len(list_of_Cross_Site_IDs)))
print ("Number of memory corruption related repots:" + str (len(list_of_memory_corruption_IDs)))
print ("Number of zero day related repots:" + str (len(zero_day)))
print(threats)

plt.bar(fields, threats)
plt.xlabel('Components')
plt.ylabel('Average Scores')
plt.title('Average Scores for Components')
plt.show()

plt.plot(fields, threats, marker='o')
plt.xlabel('Components')
plt.ylabel('Average Scores')
plt.title('Average Scores for Components')
plt.show()

def contains_word(s, w):
    return (" " + w.lower() + " ") in (" " + s.lower() + " ")
def search_multiple_description(name, *args):
    list = listdir("json/")
    number_files = len(list) - 1
    list_of_reports = {}
    for year in range(2002,2002 + number_files):
        cve_dict = create_nvd_dict(year)
        CVE_Items = cve_dict["CVE_Items"]
        for item in CVE_Items:
            description_list = item["cve"]["description"]["description_data"]
            if description_list:
                desc = description_list[0]["value"]
                for arg in args:
                    if not arg in list_of_reports:
                        list_of_reports[arg] = 0
                    if contains_word(desc, name) and contains_word(desc, arg):
                        list_of_reports[arg] += 1
    return (list_of_reports)

results_RTU=[]
results_PLC=[]
results_HMI=[]
results_MTU=[]

arrays=["overflow","denial of service","sql injection","Cross-Site","memory corruption","zero day"]
for i in arrays:
    results_RTU.append(search_multiple_description("RTU", i)[i])
for i in arrays:
    results_PLC.append(search_multiple_description("PLC", i)[i])
for i in arrays:
    results_HMI.append(search_multiple_description("HMI", i)[i])
for i in arrays:
    results_MTU.append(search_multiple_description("MTU", i)[i])
#results = search_multiple_description("RTU", "denial of service")
print(results_RTU,results_PLC,results_HMI,results_MTU)

plt.bar( arrays, results_RTU)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Average Scores for Components')
plt.show()
plt.bar( arrays, results_PLC)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Average Scores for Components')
plt.show()
plt.bar( arrays, results_HMI)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Average Scores for Components')
plt.show()
plt.bar( arrays, results_MTU)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Average Scores for Components')
plt.show()
plt.plot(fields, threats, marker='o')
plt.xlabel('Components')
plt.ylabel('Average Scores')
plt.title('Average Scores for Components')
plt.show()
def search_description(expression):
    # Get number of json files
    list = listdir("json/")
    number_files = len(list) - 1
    list_of_reports = []
    #Considering CVE reports start from 2002. There are as many files as reporting years
    for year in range(2002,2002 + number_files):
        cve_dict = create_nvd_dict(year)
        CVE_Items = cve_dict["CVE_Items"]
        for item in CVE_Items:
            description_list = item["cve"]["description"]["description_data"]
            #if description_list:
                #description = description_list[0]["value"]
                #if contains_word(description, expression):
            if "baseMetricV3" in item["impact"]:
                # list_of_reports.append(item["cve"]["CVE_data_meta"]["ID"])
                list_of_reports.append(item["impact"]["baseMetricV3"]["cvssV3"][expression])
            else:
                pass
    return(list_of_reports)
vectors_num=[]
vectors=["confidentiality","integurity","availability"]
list_of_confi_IDs = search_description("confidentialityImpact")
list_of_integ_IDs = search_description("integrityImpact")
list_of_avail_IDs = search_description("availabilityImpact")

print(list_of_confi_IDs)
print(list_of_integ_IDs)
print(list_of_avail_IDs)

vectors_num.append(sum(value == "HIGH" for value in list_of_confi_IDs))
vectors_num.append(sum(value == "HIGH" for value in list_of_integ_IDs))
vectors_num.append(sum(value == "HIGH" for value in list_of_avail_IDs))
print(vectors_num)

plt.bar(vectors, vectors_num)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Scores for Components')
plt.show()
def search_multiple_description(name1, name2):
    list = listdir("json/")
    number_files = len(list) - 1
    list_of_reports = {}
    for year in range(2002,2002 + number_files):
        cve_dict = create_nvd_dict(year)
        CVE_Items = cve_dict["CVE_Items"]

        for item in CVE_Items:
            if "baseMetricV3" in item["impact"]:
                key = item["impact"]["baseMetricV3"]["cvssV3"][name1]
                if key not in list_of_reports:
                    list_of_reports[key] = []
                list_of_reports[key].append(item["impact"]["baseMetricV3"]["cvssV3"][name2])

            else:
                pass
    return (list_of_reports)
mylist=search_multiple_description("attackVector","privilegesRequired")
attackvec=[]
total_num=[]
average=[]
number_of_high_privilege=[]
print(mylist,len(mylist))
for key in list(mylist):
    attackvec.append(key)
    number_of_high_privilege.append(mylist[key].count("HIGH"))
    total_num.append(len(mylist[key]))
    average.append(mylist[key].count("HIGH")/len(mylist[key]))

print(attackvec,number_of_high_privilege,total_num,average)

plt.bar(attackvec, average)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Scores for Components')
plt.show()
plt.bar(attackvec, total_num)
plt.xlabel('Components')
plt.ylabel('Scores')
plt.title('Scores for Components')
plt.show()